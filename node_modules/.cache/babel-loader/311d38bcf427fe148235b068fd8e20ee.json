{"ast":null,"code":"var _jsxFileName = \"/Users/dominikstein/Development/React-Projects/doorgame/src/components/App/App.js\";\nimport './App.css';\nimport React from 'react';\nimport Navigation from '../Navigation/navigation';\nimport DoorGame from '../DoorGame/doorGame';\nimport GameButton from '../GameButton/gameButton'; //Imports Pictures for rendering later\n\nimport closedDoor from \"./closed_door.svg\";\nimport robotDoor from \"./robot_door.svg\";\nimport beachDoor from \"./beach_door.svg\";\nimport spaceDoor from \"./space_door.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst doorImage = {\n  closedDoor: closedDoor,\n  robot: robotDoor,\n  beach: beachDoor,\n  space: spaceDoor\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numClosedDoors: 0,\n      currentlyPlaying: false,\n      doors: [{\n        id: 'door1',\n        src: '',\n        closedDoor: doorImage.closedDoor,\n        open: false\n      }, {\n        id: 'door2',\n        src: '',\n        closedDoor: doorImage.closedDoor,\n        open: false\n      }, {\n        id: 'door3',\n        src: '',\n        closedDoor: doorImage.closedDoor,\n        open: false\n      }],\n      startButtonText: 'Spiel starten',\n      wins: 0\n    };\n    this.handleGameConfigurations = this.handleGameConfigurations.bind(this);\n    this.openDoor = this.openDoor.bind(this);\n    this.gameOver = this.gameOver.bind(this);\n    this.randomChoreDoorGenerator = this.randomChoreDoorGenerator.bind(this);\n    this.checkForRobot = this.checkForRobot.bind(this);\n  }\n\n  handleGameConfigurations() {\n    this.resetGameSettings();\n    this.closeDoors();\n    this.randomChoreDoorGenerator();\n  }\n\n  openDoor(door) {\n    if (this.state.currentlyPlaying === false) {\n      this.gameOver();\n    } else {\n      console.log(`Du hast ${door} geöffnet.`);\n      let listOfDoors = this.state.doors;\n      let index = listOfDoors.indexOf(listOfDoors.find(doorKey => doorKey.id === door));\n      listOfDoors[index].open = true;\n      this.reduceDoors();\n      this.setState({\n        doors: listOfDoors\n      });\n    }\n  }\n\n  checkForRobot(door) {\n    if (this.state.numClosedDoors === 1) {\n      this.gameOver('win');\n    } else {\n      let listOfDoors = this.state.doors;\n      let index = listOfDoors.indexOf(listOfDoors.find(doorKey => doorKey.id === door));\n\n      if (listOfDoors[index].src === doorImage.robot) {\n        console.log('Viel Spaß beim Putzen!');\n        this.gameOver();\n      }\n    }\n  }\n\n  reduceDoors() {\n    let numOfDoors = this.state.numClosedDoors;\n    --numOfDoors;\n    this.setState({\n      numClosedDoors: numOfDoors\n    });\n  }\n\n  randomChoreDoorGenerator() {\n    const randomDoorGenerator = Math.floor(Math.random() * 3);\n    let randomDoors = this.state.doors;\n\n    if (randomDoorGenerator === 0) {\n      randomDoors[0].src = doorImage.robot;\n      randomDoors[1].src = doorImage.beach;\n      randomDoors[2].src = doorImage.space;\n      this.setState({\n        doors: randomDoors\n      });\n    } else if (randomDoorGenerator === 1) {\n      randomDoors[0].src = doorImage.beach;\n      randomDoors[1].src = doorImage.robot;\n      randomDoors[2].src = doorImage.space;\n      this.setState({\n        doors: randomDoors\n      });\n    } else {\n      randomDoors[0].src = doorImage.space;\n      randomDoors[1].src = doorImage.beach;\n      randomDoors[2].src = doorImage.robot;\n      this.setState({\n        doors: randomDoors\n      });\n    }\n\n    console.log('Türen wurden generiert.');\n  }\n\n  gameOver(status) {\n    if (status === 'win') {\n      this.countWins();\n      this.setState({\n        currentlyPlaying: false,\n        startButtonText: 'Gewonnen! Erneut spielen?'\n      });\n    } else {\n      this.setState({\n        currentlyPlaying: false,\n        startButtonText: 'Game Over! Erneut spielen?'\n      });\n    }\n  }\n\n  closeDoors() {\n    console.log('Alle Türen sind geschlossen.');\n    let listOfDoors = this.state.doors;\n    listOfDoors[0].open = false;\n    listOfDoors[1].open = false;\n    listOfDoors[2].open = false;\n    this.setState({\n      listOfDoors\n    });\n  }\n\n  resetGameSettings() {\n    console.log('GameSettings RESET is DONE');\n    this.setState({\n      numClosedDoors: 3,\n      currentlyPlaying: true,\n      doors: [{\n        id: 'door1',\n        src: '',\n        closedDoor: doorImage.closedDoor\n      }, {\n        id: 'door2',\n        src: '',\n        closedDoor: doorImage.closedDoor\n      }, {\n        id: 'door3',\n        src: '',\n        closedDoor: doorImage.closedDoor\n      }],\n      startButtonText: 'Viel Glück!'\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DoorGame, {\n        doors: this.state.doors,\n        currentlyPlaying: this.state.currentlyPlaying,\n        openDoorLogic: this.openDoor,\n        checkIfGameOver: this.gameOver,\n        checkForRobot: this.checkForRobot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameButton, {\n        buttonText: this.state.startButtonText,\n        currentlyPlaying: this.state.currentlyPlaying,\n        startGame: this.handleGameConfigurations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dominikstein/Development/React-Projects/doorgame/src/components/App/App.js"],"names":["React","Navigation","DoorGame","GameButton","doorImage","closedDoor","robot","robotDoor","beach","beachDoor","space","spaceDoor","App","Component","constructor","props","state","numClosedDoors","currentlyPlaying","doors","id","src","open","startButtonText","wins","handleGameConfigurations","bind","openDoor","gameOver","randomChoreDoorGenerator","checkForRobot","resetGameSettings","closeDoors","door","console","log","listOfDoors","index","indexOf","find","doorKey","reduceDoors","setState","numOfDoors","randomDoorGenerator","Math","floor","random","randomDoors","status","countWins","render"],"mappings":"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","sourcesContent":["import './App.css';\nimport React from 'react';\nimport Navigation from '../Navigation/navigation';\nimport DoorGame from '../DoorGame/doorGame';\nimport GameButton from '../GameButton/gameButton';\n\n//Imports Pictures for rendering later\nimport closedDoor from './closed_door.svg';\nimport robotDoor from './robot_door.svg';\nimport beachDoor from './beach_door.svg';\nimport spaceDoor from './space_door.svg';\n\nconst doorImage = {\n    closedDoor: closedDoor,\n    robot: robotDoor,\n    beach: beachDoor,\n    space: spaceDoor\n};\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      numClosedDoors: 0,\n      currentlyPlaying: false,\n      doors: [\n        {id: 'door1', src: '', closedDoor: doorImage.closedDoor, open: false},\n        {id: 'door2', src: '', closedDoor: doorImage.closedDoor, open: false},\n        {id: 'door3', src: '', closedDoor: doorImage.closedDoor, open: false}\n      ],\n      startButtonText: 'Spiel starten',\n      wins: 0\n    };\n    this.handleGameConfigurations = this.handleGameConfigurations.bind(this);\n    this.openDoor = this.openDoor.bind(this);\n    this.gameOver = this.gameOver.bind(this);\n    this.randomChoreDoorGenerator = this.randomChoreDoorGenerator.bind(this);\n    this.checkForRobot = this.checkForRobot.bind(this);\n  }\n\n  handleGameConfigurations(){\n    this.resetGameSettings();\n    this.closeDoors();\n    this.randomChoreDoorGenerator();\n  }\n\n  openDoor(door){\n    if (this.state.currentlyPlaying === false){\n      this.gameOver();\n    } else {\n      console.log(`Du hast ${door} geöffnet.`);\n      let listOfDoors = this.state.doors;\n      let index = listOfDoors.indexOf(listOfDoors.find(doorKey => (doorKey.id === door)));\n      listOfDoors[index].open = true;\n      this.reduceDoors();\n      this.setState({doors: listOfDoors});\n    }\n  }\n\n  checkForRobot(door) {\n    if(this.state.numClosedDoors === 1){\n      this.gameOver('win');\n    } else {\n      let listOfDoors = this.state.doors;\n      let index = listOfDoors.indexOf(listOfDoors.find(doorKey => (doorKey.id === door)));\n      if(listOfDoors[index].src === doorImage.robot){\n        console.log('Viel Spaß beim Putzen!');\n        this.gameOver();\n      }\n    }\n  }\n\n  reduceDoors() {\n    let numOfDoors = this.state.numClosedDoors;\n    --numOfDoors;\n    this.setState({numClosedDoors: numOfDoors});\n  }\n\n  randomChoreDoorGenerator() {\n    const randomDoorGenerator = Math.floor(Math.random() * 3);\n    let randomDoors = this.state.doors;\n    if (randomDoorGenerator === 0) {\n      randomDoors[0].src = doorImage.robot;\n      randomDoors[1].src = doorImage.beach;\n      randomDoors[2].src = doorImage.space;\n      this.setState({doors: randomDoors});\n    } else if (randomDoorGenerator === 1) {\n      randomDoors[0].src = doorImage.beach;\n      randomDoors[1].src = doorImage.robot;\n      randomDoors[2].src = doorImage.space;\n      this.setState({doors: randomDoors});\n  } else {\n      randomDoors[0].src = doorImage.space;\n      randomDoors[1].src = doorImage.beach;\n      randomDoors[2].src = doorImage.robot;\n      this.setState({doors: randomDoors});\n  }\n  console.log('Türen wurden generiert.')\n}\n\n  gameOver(status) {\n    if (status === 'win') {\n      this.countWins();\n      this.setState({currentlyPlaying: false, startButtonText: 'Gewonnen! Erneut spielen?'});\n    } else {\n      this.setState({currentlyPlaying: false, startButtonText: 'Game Over! Erneut spielen?'});\n    }\n  }\n\n  closeDoors() {\n    console.log('Alle Türen sind geschlossen.');\n    let listOfDoors = this.state.doors;\n    listOfDoors[0].open = false;\n    listOfDoors[1].open = false;\n    listOfDoors[2].open = false;\n    this.setState({listOfDoors});\n  }\n\n  resetGameSettings(){\n    console.log('GameSettings RESET is DONE');\n    this.setState({\n      numClosedDoors: 3,\n      currentlyPlaying: true,\n      doors: [\n        {id: 'door1', src: '', closedDoor: doorImage.closedDoor},\n        {id: 'door2', src: '', closedDoor: doorImage.closedDoor},\n        {id: 'door3', src: '', closedDoor: doorImage.closedDoor}\n      ],\n      startButtonText: 'Viel Glück!'\n  });\n  }\n\n  render() {\n    return (\n      <div>\n        <Navigation />\n        <DoorGame \n          doors={this.state.doors}\n          currentlyPlaying={this.state.currentlyPlaying}\n          openDoorLogic={this.openDoor} \n          checkIfGameOver={this.gameOver} \n          checkForRobot={this.checkForRobot}/>\n        <GameButton \n          buttonText={this.state.startButtonText} \n          currentlyPlaying={this.state.currentlyPlaying}\n          startGame={this.handleGameConfigurations} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}